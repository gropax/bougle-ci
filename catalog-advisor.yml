resource_types:
- name: nuget-package
  type: docker-image
  source:
    repository: ((nexus-docker.uri))/concourse-nuget-resource
    tag: "1.0.0"
    username: ((nexus.username))
    password: ((nexus.password))


resources:
- name: bougle-ci
  type: git
  icon: github
  source:
    uri: https://github.com/gropax/bougle-ci.git

- name: docker-compose
  type: git
  icon: github
  source:
    uri: https://github.com/gropax/bougle-ci.git
    paths:
    - docker-compose/catalog-advisor.yml

- name: code
  type: git
  icon: github
  source:
    uri: ((git-repo.address))
    private_key: ((git-repo.private_key))

- name: server-image
  type: docker-image
  icon: docker
  source:
    repository: ((nexus-docker.uri))/pragma/catalog-advisor
    username: ((nexus.username))
    password: ((nexus.password))
    tag: latest

- name: client-package
  type: nuget-package
  icon: package-variant-closed
  source:
    package_id: Scenes.Backend.Client
    uri: ((nexus-nuget.uri))
    api_key: ((nexus-nuget.apikey))
    username: ((nexus.username))
    password: ((nexus.password))


jobs:
- name: build-and-test
  plan:
  - get: code
    trigger: true
  - get: bougle-ci
  - task: build
    file: bougle-ci/tasks/dotnet-build.yml
    vars:
      source: "code"
      solution: "Scenes.Backend.sln"
      framework: "3.1"
  - task: unit-tests
    file: bougle-ci/tasks/dotnet-test.yml
    vars:
      source: "code"
      solution: "Scenes.Backend.sln"
      framework: "3.1"

- name: publish-client
  plan:
  - get: code
    passed: [build-and-test]
  - task: build-package
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: mcr.microsoft.com/dotnet/sdk
          tag: "5.0"
      inputs:
      - name: code
      outputs:
      - name: nuget
      run:
        path: sh
        args:
        - -exc
        - |
          dotnet build ./code/src/Scenes.Backend.Client/Scenes.Backend.Client.csproj
          dotnet pack ./code/src/Scenes.Backend.Client/Scenes.Backend.Client.csproj -o ./nuget
  - put: client-package
    params: 
      package_dir: nuget


- name: build-server-image
  plan:
  - get: code
    passed: [build-and-test]
  - put: server-image
    params:
      build: code
      dockerfile: code/src/Scenes.Backend.Web/Dockerfile
      tag_file: code/src/Scenes.Backend.Web/version
      tag_as_latest: true


- name: deploy-latest
  plan:
  - get: server-image
    trigger: true
    passed: [build-server-image]
  - get: docker-compose
  - task: deploy-server
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: ((nexus-docker.uri))/concourse-docker-compose-ssh
          tag: "1.0.0"
          username: ((nexus.username))
          password: ((nexus.password))
      inputs:
      - name: docker-compose
      - name: server-image
      params:
        DOCKER_HOST: ((server.ssh_connection))
        SSH_KEY: ((server.ssh_key))
        SSH_HOST: ((server.ssh_host))
        SSH_PORT: ((server.ssh_port))
        DOCKER_REGISTRY: ((nexus-docker.uri))
        NEXUS_USR: ((nexus.username))
        NEXUS_PWD: ((nexus.password))
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir ~/.ssh

          set +x  # avoid logging the passwords
          echo "$SSH_KEY" > ~/.ssh/id_ed25519  # create SSH key file
          echo "$NEXUS_PWD" > ~/nexus_pwd      # put Docker registry pwd in file
          set -x

          chmod 400 ~/.ssh/id_ed25519        # restrict file access, otherwise key is refused by agent

          eval "$(ssh-agent -s)"             # start the ssh-agent service
          ssh-add ~/.ssh/id_ed25519          # add SSH key to agent
          ssh-keyscan -t ed25519 -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts  # add host to known_hosts to avoid user prompt

          cat ~/nexus_pwd | docker login $DOCKER_REGISTRY -u $NEXUS_USR --password-stdin  # login into Docker registry

          docker-compose -f ./docker-compose/docker-compose/catalog-advisor.yml down
          docker pull "$DOCKER_REGISTRY/pragma/catalog-advisor:latest"
          docker-compose -f ./docker-compose/docker-compose/catalog-advisor.yml up -d
          